import math
from typing import List

from helper import Star, calc_dis
from helper import read_file

def get_neighbors(star: Star, stars: List[Star]):
    """Get the neighbors of a star by looking at its routes list"""
    neighbors: List[Star] = []
    
    # Loop through the routes of the star and append the corresponding stars to the neighbors list
    for i in star.routes:
        neighbors.append(stars[i])

    return neighbors

def calculate_paths(start: Star, stars: List[Star]):
    """Calculate the shortest distance from the starting star to all other stars using Dijkstra's algorithm"""
    # Initialize a table to store the shortest distance and previous star for each star
    table = {}
    for s in stars:
        table[s.name] = {
            'shortest_dis': math.inf if s.name != start.name else 0,  # Set the shortest distance to infinity for all stars except the start star
            'prev_star': None  # Set the previous star to None for all stars
        }

    # Initialize the unvisited and visited lists
    unvisited = [s for s in stars]
    visited = []

    # Loop through all unvisited stars
    for s in unvisited:
        # Get the neighbors of the current star
        neighbors = get_neighbors(s, stars)
        # Loop through all neighbors
        for n in neighbors:
            # Calculate the distance between the current star and its neighbour
            dist = calc_dis(s, n)

            # If the calculated distance is less than the current shortest distance, update the shortest distance and previous star
            if dist < table[n.name]['shortest_dis']:
                table[n.name]['shortest_dis'] = dist
                table[n.name]['prev_star'] = s.name

        # Add the current star to the visited list and remove it from the unvisited list
        visited.append(s)
        unvisited.remove(s)

    return table

def get_shortest_path(start: Star, end: Star, table: dict):
    """Get the shortest path from the starting star to the ending star using the table generated by Dijkstra's algorithm"""
    path = []
    current_star = table[end.name]
    current_star_n = end.name

    # Loop until the start star is reached or there is no previous star
    while start.name != end.name and current_star['prev_star'] != None:
        path.append(current_star_n)
        prev_star_n = table[current_star_n]['prev_star']
        current_star = table[prev_star_n]
        current_star_n = prev_star_n
    
    # Append the start star to the path
    path.append(start.name)
    return list(reversed(path))  # Return the path in reverse order (from start to end)

def main():
    stars = read_file()
    starting_star = stars[0]
    ending_star = stars[-1]

    table = calculate_paths(starting_star, stars)
    path = get_shortest_path(starting_star, ending_star, table)
    print(f"Shortest path from {starting_star.name} to {ending_star.name}: {path}")

if __name__ == '__main__':
    main()